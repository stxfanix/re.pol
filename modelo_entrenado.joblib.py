# -*- coding: utf-8 -*-
"""polinomica

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D9fg6-rtq11-81jSwB_ZrXsHO6dQfwTf

Los titulos de los graficos no serán visibles.

Paquetes necesarios.
"""

!pip install ydata-profiling

from ydata_profiling import ProfileReport

pip install squarify

pip install joypy

import joblib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import seaborn as sns
import warnings; warnings.simplefilter('ignore')
import matplotlib.lines as mlines
import matplotlib.patches as mpatches
import warnings; warnings.simplefilter('ignore')
import statsmodels.tsa.stattools as stattools
import scipy.cluster.hierarchy as shc
from matplotlib import patches
from scipy.spatial import ConvexHull
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.seasonal import seasonal_decompose
from dateutil.parser import parse
from scipy.stats import sem
from pandas.plotting import andrews_curves
from pandas.plotting import parallel_coordinates
import squarify
import joypy

"""Importamos el dataset"""

from google.colab import files
uploaded = files.upload()
df = pd.read_csv("dataset.csv")

#from google.colab import drive
#drive.mount('/content/drive')

"""Descripción


"""

df.shape

df.head()

df.tail()

df.info()

"""edad esta como flotante, los otros estan correctos, hay que ver lo de objetos"""

df.describe()

"""mínimo de edad no puede ser 0.8,
faltan datos de bmi

TRANSFORMACIÓN, NORMALIZACIÓN Y ELIMINACION
"""

#ejecutar
df=df.drop('id', axis=1)

columna_edad=df['age']
print(columna_edad)

plt.figure(figsize=(10, 6))
plt.hist(df['age'], bins=range(0, int(df['age'].max()) + 5, 5), color='skyblue', edgecolor='black')
#plt.title('Distribución de Edades')
plt.xlabel('Edad')
plt.ylabel('Frecuencia')
plt.xticks(range(0, int(df['age'].max()) + 5, 5))  # Establecer ticks en el eje x de 5 en 5
plt.grid(axis='y')
plt.show()

"""hacemos foco en edad para entrar en detalle y analizar por que es flotante y el minimo tan bajo"""

#para encontrar los no enteros
no_enteros = df[df['age'] % 1 != 0]
print (no_enteros) #hay 1091 edades con coma de las 43400

"""aca empieza el analisis para ver si se eliminan los numeros no enteros de las edades (#se eliminaron)"""

#posibles borrados
#comparar que no enteros coinciden con las filas esas que tengan nan
if 'bmi' in no_enteros.columns and 'smoking_status' in no_enteros.columns:
    res = no_enteros[
        no_enteros['bmi'].isna() & no_enteros['smoking_status'].isna()]
    print(res)

res.shape[0]

"""comprobamos que no sean datos significativos en el analisis"""

#NO ENTEROS CON HIPERTENSION
if 'hypertension' in no_enteros.columns:
    res = no_enteros[no_enteros['hypertension'] == 1]
    print(res)
    print("no enteros con hipertension:",res.shape[0])
    #no es necesario correr este (lo puse de nuevo porque se habia borrado)

#NO ENTEROS CON UN ATAQUE CARDIACO
if 'heart_disease' in no_enteros.columns:
    res = no_enteros[no_enteros['heart_disease'] == 1]
    print(res)
    print("no enteros que tuvieron un infarto: ",res.shape[0])
       #no es necesario correr este (lo puse de nuevo porque se habia borrado)

#NIVEL DE GLUCOSA MAYOR A 180 EN LAS EDADES NO ENTERAS
if 'avg_glucose_level' in no_enteros.columns:

    res = no_enteros[no_enteros['avg_glucose_level'] > 180] #Condicion
    print(res)
    print("no enteros de avg_glucose_level superiores a 180: ",res.shape[0])
       #no es necesario correr este (lo puse de nuevo porque se habia borrado)

glucosaaltadenoenteros=no_enteros[no_enteros['avg_glucose_level'] <70].shape[0]
glucosaaltadenoenteros
othereliminados=no_enteros[no_enteros['gender']=="other"]
othereliminados

#NIVEL DE GLUCOSA MENOR A 70
if 'avg_glucose_level' in no_enteros.columns:
    res = no_enteros[no_enteros['avg_glucose_level'] < 70] #condicion
    print(res)
    print("no enteros de avg_glucose_level inferiores a 70: ", res.shape[0])
     #no es necesario correr este (lo puse de nuevo porque se habia borrado)

#HAY QUE CORRERLO
#eliminacion de filas de todos los numeros no enteros (1091)
indices_a_eliminar = df[df['age'] % 1 != 0].index
df = df.drop(indices_a_eliminar)
df.shape

#HAY QUE CORRERLO
#ponemos en el mismo formato todas las columnas
df.rename(columns={'Residence_type': 'residence_type'}, inplace=True)

print(df)

df["age"]

df.describe()

"""analizamos que no modifique mucho y verificamos que el minimo de edad sea 1.

ESTANDARIZACION DE LOS DATOS:
"""

#correrlo si o si
df['age'] = df['age'].astype(int) #ya son todos enteros

df['age'].describe()

df.describe() #verificamos

#COMPROBACION DE QUE LAS EDADES SEAN VALIDAS
edades_menores= df[df['age'] < 0]
edades_mayores = df[df['age'] > 100]

print("menores a 0:")
print(edades_menores)

print("mayores a 100:")
print(edades_mayores)

invalidas_menores = (df['age'] < 0).sum()

invalidas_mayores= (df['age'] > 100).sum()

print(" menores a 0:", invalidas_menores)
print("mayores a 100:", invalidas_mayores)


#TODO EN ORDEN

residencia=df['residence_type'].value_counts()
print (residencia)

df['age'].describe()

infantes= df[df['age']<6]
print ("infantes:" ,infantes)

niños=df[(df['age']>6)& (df['age'] <12)]
print ("niños: ",niños)

adolescentes= df[(df['age']>12)& (df['age'] <24)]
print("adolescentes: ",adolescentes)

adultos=df[(df['age']>24)& (df['age'] <50)]
print ("adultos: ",adultos)

adultos_mayores= df[df['age']>50]
print("adultos mayores: ",adultos_mayores)

generos=df['gender'].value_counts()
print (generos)
#los valores estan bien

otro_genero=df[df['gender']=="Other"]
print(otro_genero)
otro_genero.shape

"""son 11 valores que capaz podemos omitir para simplificar los grafico"""

hypertension_count = otro_genero['hypertension'].sum()
heart_disease_count = otro_genero['heart_disease'].sum()
stroke_count = otro_genero['stroke'].sum()

print("hipertension:",hypertension_count)
print("desorden cardiaco", heart_disease_count)
print("acv:", stroke_count)

trabajos=df['work_type'].value_counts()
print(trabajos) #hay que reemplazar children por Children para que sea del mismo modo todos

#EJECUTAR
#cambio de tipo de trabajos
df['work_type'] = df['work_type'].replace('children', 'Children')  #se reemplaza children por Children para que sea del mismo modo todos
#comprobacion
trabajos=df['work_type'].value_counts()
print(trabajos)

"""revisar si se cambia o no el tipo"""

fumador=df['smoking_status'].value_counts()
print (fumador)#se va a pasar a mayusculas igual que el resto de categorias

#ejecutar
df['smoking_status'] = df['smoking_status'].replace({
    'never smoked': 'Never smoked',
    'formerly smoked': 'Formerly smoked',
    'smokes': 'Smokes'
})
#comprobamos
fumador=df['smoking_status'].value_counts()
print (fumador)

"""LIMPIEZA DE LOS DATOS

"""

#ejecutar
df['work_type'] = df['work_type'].replace({
    'Private': 'Private',
    'Self-employed': 'Self employed',
    'Govt_job': 'Govt job',
    'Children': 'Children',
    'Never_worked': 'Never worked'
})

print(df)

df['work_type'].value_counts()

df.duplicated().sum() #comprobamos que no haya duplicados

nulogenero_df=df[df["gender"].isna( )] #comprobamos que la variable género no tenga nan.
nulogenero_df

nuloedad_df=df[df["age"].isna( )]
nuloedad_df #comprobamos que la columna edad no tenga NaN.

nulohipertension_df=df[df["hypertension"].isna( )]
nulohipertension_df

nulocardiopatia_df=df[df["heart_disease"].isna( )]
nulocardiopatia_df

nulocasado_df=df[df["ever_married"].isna( )]
nulocasado_df

nulotipotrabajo_df=df[df["work_type"].isna( )]
nulotipotrabajo_df

nuloresidencia_df=df[df["residence_type"].isna( )]
nuloresidencia_df

nuloglucosa_df=df[df["avg_glucose_level"].isna( )]
nuloglucosa_df

nulobmi_df=df[df["bmi"].isna( )] #hay 1423 faltantes
nulobmi_df

nulofumador_df=df[df["smoking_status"].isna( )]
nulofumador_df#hay 12201 datos faltantes en la columna estado de fumar

nuloACV_df=df[df["stroke"].isna( )]
nuloACV_df

"""ANALISIS PARA VER QUE HACEMOS CON LOS DATOS FALTANTES DE BMI Y SMOKING"""

promediobmi=df["bmi"].mean()
promediobmi #promedio del bmi es 28,9
nonulobmi_df=df[df["bmi"].notna( )]
promediobmi

"""comenzamos a observar que el promedio de bmi indica sobrepeso.


"""

infantes.shape[0] #hay 1804 infantes
niños.shape[0] #hay 1787 ninos
adolescentes.shape[0] #hay 5223 adolescentes
adultos.shape[0] #hay 14449 adultos
adultos_mayores.shape[0] #hay 17202
#hay 31.651 mayores y 8814 menores.

"""el promedio es acorde ya de por si porque el 75% de los datos son de adultos/personas mayores."""

nulobmi_df#eran 1423 nulos
bmiporglucosaalto=nulobmi_df[nulobmi_df["avg_glucose_level"]>110]
bmiporglucosaalto #la mitad de los datos faltantes de bmi son de personas con el nivel de glucosa alto
bmiyedad_df=nulobmi_df[["bmi","age"]]
bmiporedadalto_df=bmiyedad_df[bmiyedad_df["age"]>40]
bmiporedadalto_df  #2/3 de los datos faltantes de bmi son de personas con edad alta
bmyyacv_df=nulobmi_df[["bmi","stroke"]]
bmyyacv_df #la mitad de los datos faltantes de bmi son de personas con ACV
bmiporacv_df=nulobmi_df[nulobmi_df["stroke"]==0]
bmiporacv_df #casi todos los datos faltantes de bmi son de personas que no tienen ACV.
bmiporgenero_df=nulobmi_df[nulobmi_df["gender"]=="Male"]
bmiporgenero_df#se reparte mitad y mitad
bmiporedadalto_df
bmiyfumar=nulobmi_df[nulobmi_df["avg_glucose_level"]=="never smoked"]
bmiyfumar #todos los datos faltantes de bmi son de personas que no fuman
bmiyhipertension=nulobmi_df[["bmi","hypertension"]]
bmiyhipertension=nulobmi_df[nulobmi_df["hypertension"]==0]
bmiyhipertension #2/3 de todos los datos faltantes de bmi son de los que no tienen hipertension.
bmiycardiopatia=nulobmi_df[nulobmi_df["heart_disease"]==0]
ohter=nulobmi_df[nulobmi_df["gender"]=="Other"]
bmiyhipertension

df_ec = bmyyacv_df.groupby('stroke').size()
plt.figure(figsize=(8, 8))
plt.pie(df_ec, labels=df_ec.index, autopct='%1.1f%%', colors=['deepskyblue', 'pink'], startangle=140)
plt.axis('equal')
plt.show()

df_ec = bmiyhipertension.groupby('stroke').size()
plt.figure(figsize=(8, 8))
plt.pie(df_ec, labels=df_ec.index, autopct='%1.1f%%', colors=['deepskyblue', 'pink'], startangle=140)
plt.axis('equal')
plt.show()

#EJECUTAR
# Contar las categorías y NaN
smoking_counts = df['smoking_status'].value_counts()
nan_count = df['smoking_status'].isna().sum()

# Añadir NaN a los conteos
smoking_counts['NaN'] = nan_count

# Crear un gráfico de pastel
plt.figure(figsize=(8, 8))
smoking_counts.plot(kind='pie', autopct='%1.1f%%', startangle=90, colors=['lightblue', 'lightgreen', 'salmon', 'grey'])
#plt.title('Distribución de Smoking Status con NaN')
plt.ylabel('')  # Eliminar etiqueta del eje y
plt.show()

# Contar los datos disponibles y ausentes
available_count = df['bmi'].count()
nan_count = df['bmi'].isna().sum()

# Crear un DataFrame para el gráfico de barras
data = {'Estado': ['Datos Disponibles', 'Datos Ausentes'],
        'Cantidad': [available_count, nan_count]}
df_plot = pd.DataFrame(data)

# Crear gráfico de barras
plt.figure(figsize=(8, 5))
plt.bar(df_plot['Estado'], df_plot['Cantidad'], color=['lightblue', 'salmon'])
#plt.title('Datos de BMI: Disponibles vs Ausentes')
plt.ylabel('Cantidad')
plt.grid(axis='y')
plt.show()

df.describe()

plt.figure(figsize=(10, 6))
plt.hist(df['age'], bins=range(0, int(df['age'].max()) + 5, 5), color='skyblue', edgecolor='black')
#plt.title('Distribución de Edades')
plt.xlabel('Edad')
plt.ylabel('Frecuencia')
plt.xticks(range(0, int(df['age'].max()) + 5, 5))  # Establecer ticks en el eje x de 5 en 5
plt.grid(axis='y')
plt.show()

df['age'].describe()

glucosa_alta = 110
bminulo_glucosa_alta = df[(df['bmi'].isna()) & (df['avg_glucose_level'] > glucosa_alta)]

bminulo_glucosa_alta_filtrado = bminulo_glucosa_alta[(bminulo_glucosa_alta['age'] >= 25) & (bminulo_glucosa_alta['age'] <= 70)]

edad_min = bminulo_glucosa_alta_filtrado['age'].min()
edad_max = bminulo_glucosa_alta_filtrado['age'].max()

edad_mediana = bminulo_glucosa_alta_filtrado['age'].median()

print("El rango de edad para los bminulos con glucosa alta es: ", edad_min, "a", edad_max)
print("La mediana de edad para los bminulos con glucosa alta es: ",edad_mediana)

"""analisis para confirmar que la glucosa es alta"""

#bmi y glucosa
BM_MV=df.bmi.isna() #devuelve false si los valores no son nulos y true si son nulos
MV_labels=("Con valores faltantes","Sin valores faltantes") #lista con los titulos del grafico
box_sr=pd.Series(" ",index=BM_MV.unique()) #lista de valores unicos de bm
for poss in BM_MV.unique(): #itera sobre lo valores unicos de BM_MV
  BM = BM_MV == poss  #crea serie booleana donde si  poss es true cada valor va a ser true si el valor en BM_MV es True
  box_sr[poss]=df[BM].avg_glucose_level #se actualiza box_sr donde si poss es true entonces box_sr en la posicion true contendra las temperaturas donde faltan datos
plt.boxplot(box_sr,vert=False)
plt.yticks([1,2],MV_labels)

"""Con este grafico comprobamos que el valor la glucosa cambia significativamente entre las dos poblaciones. Esto muestra que un cambio de glucosa podría haber causado o influido en la aparición de valores faltantes en el BMI."""

#bmi y glucosa
BM_MV=df.bmi.isna()
glucosa_range=(df.avg_glucose_level.min(),df.avg_glucose_level.max())
for i, poss in enumerate(BM_MV.unique()): #recorre los valores unicos de BM_MV y los asigna a la variable poss. i guarda para controlar las posiciones de los subgraficos
  plt.subplot(1,2,i+1) #permite mostrar los histogramas uno al lado del otro, crea una figura con disposicion de los subgraficos de 1 fila y 2 columnas y selecciona el subgrafico en la posicion i.
  BM=BM_MV==poss #serie que guarda las filas donde BM_MV coincide con poss
  df[BM].avg_glucose_level.hist() #crea un histograma de la variable para las filas de bm
  plt.xlim=glucosa_range #agrega los limites.
plt.show()

"""se ve una diferencia"""

#edad y bmi
BM_MV=df.bmi.isna()
MV_labels=("Con valores faltantes","Sin valores faltantes")
box_sr=pd.Series(" ",index=BM_MV.unique())
for poss in BM_MV.unique():
  BM = BM_MV == poss
  box_sr[poss]=df[BM].age
plt.boxplot(box_sr,vert=False)
plt.yticks([1,2],MV_labels)

"""no es tan distinto, veamos el histograma"""

#edad y bmi
BM_MV=df.bmi.isna()
edad_range=(df.age.min(),df.age.max())
MV_labels=("Con valores faltantes","Sin valores faltantes")
for i, poss in enumerate(BM_MV.unique()):
  plt.subplot(1,2,i+1)
  BM=BM_MV==poss
  df[BM].age.hist()
  plt.xlim=edad_range
  plt.title=MV_labels
plt.show()

"""se observa como cambia la distribución"""

#bmi y enfermedad corazon
BM_MV=df.bmi.isna()
MV_labels=("Con valores faltantes","Sin valores faltantes")
box_sr=pd.Series(" ",index=BM_MV.unique())
for poss in BM_MV.unique():
  BM = BM_MV == poss
  box_sr[poss]=df[BM].heart_disease
plt.boxplot(box_sr,vert=False)
plt.yticks([1,2],MV_labels)

"""no hay diferencia por lo que los valores faltantes no debe depender
de heart disease
"""

#bmi y enfermedad del corazon
BM_MV=df.bmi.isna()
hypertension_range=(df.heart_disease.min(),df.heart_disease.max())
MV_labels=("Con valores faltantes","Sin valores faltantes")
for i, poss in enumerate(BM_MV.unique()):
  plt.subplot(1,2,i+1)
  BM=BM_MV==poss
  df[BM].heart_disease.hist()
  plt.xlim=hypertension_range
  plt.title=MV_labels
plt.show()

"""son similares asi que arribamos a la misma conclusión."""

#bmi y hipertension
BM_MV=df.bmi.isna()
MV_labels=("Con valores faltantes","Sin valores faltantes")
box_sr=pd.Series(" ",index=BM_MV.unique())
for poss in BM_MV.unique():
  BM = BM_MV == poss
  box_sr[poss]=df[BM].hypertension
plt.boxplot(box_sr,vert=False)
plt.yticks([1,2],MV_labels)

"""veamos qué ocurre con el histograma"""

#bmi y hipertension
BM_MV=df.bmi.isna()
hypertension_range=(df.hypertension.min(),df.hypertension.max())
MV_labels=("Con valores faltantes","Sin valores faltantes")
for i, poss in enumerate(BM_MV.unique()):
  plt.subplot(1,2,i+1)
  BM=BM_MV==poss
  df[BM].hypertension.hist()
  plt.xlim=hypertension_range
  plt.title=MV_labels
plt.show()

#bmi y acv
BM_MV=df.bmi.isna()
MV_labels=("Con valores faltantes","Sin valores faltantes")
box_sr=pd.Series(" ",index=BM_MV.unique())
for poss in BM_MV.unique():
  BM = BM_MV == poss
  box_sr[poss]=df[BM].stroke
plt.boxplot(box_sr,vert=False)
plt.yticks([1,2],MV_labels)

"""no hay diferencias"""

numeric_data = df.select_dtypes(include=['float64', 'int64'])
sns.heatmap(numeric_data.corr(),annot=True,cmap='RdYlGn',linewidths=0.2)
#no tocarlo

"""El grafico nos muestra que no hay una relación significativa entre las variables por lo que vamos a proceder a eliminar los datos NaN del bmi."""

sns.pairplot(df)
#no tocarlo

"""grafico de dispersion para seguir viendo las relaciones como la de bmi y stroke antes de eliminar, comprobamos que no hay.

son pocos datos pero como vimos que pueden afectar a otras variables vamos a comprobar haciendo histogramas de esas variables antes y después de borrarlos
"""

plt.hist(df["hypertension"])
plt.show()
#no tocarlo

plt.hist(df["avg_glucose_level"])
plt.show()
#no tocarlo

plt.hist(df["age"])
plt.show()

plt.hist(df["bmi"])
plt.show()
#no tocarlo

"""vemos la distribucion de los datos antes de borrarlos"""

valoresnonulos=df[df["bmi"].notna( )] #vemos los bmi que no son nulos
cantidaddepersonasconacv=df[df["stroke"]==1] #hay 782 personas con acv
valoresnonulosconacv=valoresnonulos[valoresnonulos["stroke"]==1] #hay 643 personas con acv con bmi registrado, es un 83%
valoresnonulosconacv
indicesaeliminar=df[df['bmi'].isna()].index
indicesaeliminar #comprobamos que vamos a eliminar los correctos
df = df.drop(indicesaeliminar)#borramos
df.shape#comprobamos que se hayan borrado

df["bmi"].mean() #vemos que el promedio no cambie mucho luego de eliminar (no cambia)

numeric_data = df.select_dtypes(include=['float64', 'int64'])
sns.heatmap(numeric_data.corr(),annot=True,cmap='RdYlGn',linewidths=0.2)

"""comprobamos que las relaciones no fueron modificadas (las de bmi no sin embargo algunas si se modificaron un poco pero no significativamente)


"""

sns.pairplot(df)

"""comprobamos que no hayan cambiado muchos las relaciones"""

plt.hist(df["hypertension"])
plt.show()
#no tocarlo

plt.hist(df["avg_glucose_level"])
plt.show()
#no tocarlo

plt.hist(df["bmi"])
plt.show()

plt.hist(df["age"])
plt.show()

"""comprobamos que la eliminación no provocó sesgo (nada)"""

#como entre los bmi habia algunos del genero other, revisamos como queda eso que de por si era minoria que representa el 0.1
cant_gen = df['gender'].value_counts()

plt.figure(figsize=(8, 6))
plt.pie(cant_gen, labels=cant_gen.index, autopct='%1.1f%%', startangle=140, colors=['#ff9999','#66b3ff'])
#plt.title ('Distribución por Género')
plt.axis('equal')  # eso de equal parece que hace que los graficos sean redondos
plt.show()

cant=df['gender'].value_counts() #hay 7 other, por lo que es en vano tenerlo
print (cant)

#EJECUTAR
#borramos los other que quedan
indices_other = df[df['gender'] == 'Other'].index
df=df.drop(indices_other)

df.shape

otherahora=df[df["gender"]=="Other"]
otherahora

df['gender'].value_counts()

df["bmi"].mean()

fumadornonulo=df[df["smoking_status"].notna()] #hay 29065 con smoke registrado
fumadornonulo

df["smoking_status"].value_counts() #un gran n° de los registrados nunca fumó.

fumadornonulo

valores=df["smoking_status"].value_counts().values
nombres=df["smoking_status"].value_counts().index
plt.bar(nombres,valores)
plt.show()
#no tocar

"""acá vemos como hay más que nunca fumaron."""

fumadornulo=df[df["smoking_status"].isna()]
fumadornulo #11814 son ahora que borramos datos
fumarporglucosaalto=fumadornulo[fumadornulo["avg_glucose_level"]>110]
fumarporglucosaalto #la mayoria de los datos faltantes de estado de fumar son de personas con el nivel de glucosa normal.
fumaryedad=fumadornulo[["smoking_status","age"]]
fumarmenores_df=fumaryedad[fumaryedad["age"]<24]
fumarmenores_df  #la mitad de los datos faltantes de fumar son de menores.
fumaryacv_df=fumadornulo[fumadornulo["stroke"]==0]
fumaryacv_df #el 99% datos faltantes de fumar son de personas que no tienen ACV.
fumarporgenero_df=fumadornulo[fumadornulo["gender"]=="Male"]
fumarporgenero_df#se reparte mas o menos mitad y mitad, hay mas mujeres.
fumaryhipertension=fumadornulo[fumadornulo["hypertension"]==0]
fumaryhipertension #casi todos de los datos faltantes de smoking son de los que no tienen hipertension.
fumaryheart=fumadornulo[fumadornulo["heart_disease"]==0] #casi todos de los datos faltantes de smoking son de los que no tienen cardiopatia.
fumaryheart
fumaryresidencia=fumadornulo[fumadornulo["residence_type"]=="Rural"]
fumaryresidencia #hay mitad y mitad en cuanto a tipos de residencias
fumarycasado=fumadornulo[fumadornulo["ever_married"]=="Yes"]
fumarycasado #se reparte mitad y mitad
fumarmenores_df

BM_MV=df.smoking_status.isna() #devuelve false si los valores no son nulos y true si son nulos
MV_labels=["Con valores faltantes","Sin valores faltantes"] #lista con los titulos del grafico
box_sr=pd.Series(" ",index=BM_MV.unique()) #lista de valores unicos de bm
for poss in BM_MV.unique(): #itera sobre lo valores unicos de BM_MV
  BM = BM_MV == poss  #crea serie booleana donde si  poss es true cada valor va a ser true si el valor en BM_MV es True
  box_sr[poss]=df[BM].age #se actualiza box_sr donde si poss es true entonces box_sr en la posicion true contendra las temperaturas donde faltan datos
plt.boxplot(box_sr,vert=False)
plt.yticks([1,2],MV_labels)

"""hay una diferencia pero no tan grave"""

BM_MV=df.smoking_status.isna()
MV_labels=["Con valores faltantes","Sin valores faltantes"]
box_sr=pd.Series(" ",index=BM_MV.unique())
for poss in BM_MV.unique():
  BM = BM_MV == poss
  box_sr[poss]=df[BM].heart_disease
plt.boxplot(box_sr,vert=False)
plt.yticks([1,2],MV_labels)

"""no hay diferencias"""

BM_MV=df.smoking_status.isna()
MV_labels=["Con valores faltantes","Sin valores faltantes"]
box_sr=pd.Series(" ",index=BM_MV.unique())
for poss in BM_MV.unique():
  BM = BM_MV == poss
  box_sr[poss]=df[BM].hypertension
plt.boxplot(box_sr,vert=False)
plt.yticks([1,2],MV_labels)

"""no hay diferencias"""

BM_MV=df.smoking_status.isna()
MV_labels=["Con valores faltantes","Sin valores faltantes"]
box_sr=pd.Series(" ",index=BM_MV.unique())
for poss in BM_MV.unique():
  BM = BM_MV == poss
  box_sr[poss]=df[BM].stroke
plt.boxplot(box_sr,vert=False)
plt.yticks([1,2],MV_labels)

"""no hay diferencias"""

#fumar y nivel de glucosa
BM_MV=df.smoking_status.isna()
MV_labels=["Con valores faltantes","Sin valores faltantes"]
box_sr=pd.Series(" ",index=BM_MV.unique())
for poss in BM_MV.unique():
  BM = BM_MV == poss
  box_sr[poss]=df[BM].avg_glucose_level
plt.boxplot(box_sr,vert=False)
plt.yticks([1,2],MV_labels)

"""se observan diferencias pero no tan extremas"""

#fumar y si esta casado
BM_MV=df.smoking_status.isna()
MV_labels=["Sin valores faltantes","Con valores faltantes"]
plt.figure(figsize=(10, 4))
for i, poss in enumerate(BM_MV.unique()):
  plt.subplot(1,2,i+1)
  BM=BM_MV==poss
  df[BM].ever_married.value_counts().plot.bar() #lo unico que cambia es el tipo de grafico y las escalas porque ahora no son numericas sino son nombres
plt.show()

"""hay una leve diferencia"""

def Diagnose_MV_Categorical(df,str_att_name,BM_MV):
  plt.figure(figsize=(10,4))
  for i,poss in enumerate(BM_MV.unique()):
    plt.subplot(1,2,i+1)
    BM = BM_MV == poss
    df[BM][str_att_name].value_counts().plot.bar()
BM_MV=df.smoking_status.isna()

Diagnose_MV_Categorical(df,'gender',BM_MV)

"""hay una leve diferencia"""

Diagnose_MV_Categorical(df,'residence_type',BM_MV)

"""no hay diferencias"""

Diagnose_MV_Categorical(df,'work_type',BM_MV)

"""hay una pequeña diferencia"""

frecuencia=df["smoking_status"].value_counts()
mascomun=frecuencia.idxmax()
mascomun  #mas comun es que nunca hayan fumado

df_ec = fumadornulo.groupby('stroke').size()
plt.figure(figsize=(8, 8))
plt.pie(df_ec, labels=df_ec.index, autopct='%1.1f%%', colors=['deepskyblue', 'pink'], startangle=140)
plt.axis('equal')
plt.show()

df_ec = fumadornonulo.groupby('smoking_status').size()
plt.figure(figsize=(8, 8))
plt.pie(df_ec, labels=df_ec.index, autopct='%1.1f%%', colors=['deepskyblue', 'pink'], startangle=140)
plt.axis('equal')
plt.show()

plt.boxplot(fumadornulo["age"])

#edad y valores nulos de fumador
valores=fumadornulo["age"].value_counts().values
nombres=fumadornulo["age"].value_counts().index
plt.bar(nombres,valores)
plt.show()

#EJECUTAR
df['smoking_status'].fillna("No smokes",inplace=True) #reemplazamos a los que tienen vacio por no fuman.

comprobacionvaloresnulos=df['smoking_status'].isna().sum()
comprobacionvaloresnulos

valores=df["smoking_status"].value_counts().values
nombres=df["smoking_status"].value_counts().index
plt.bar(nombres,valores)
plt.show()

df.shape

#frecuencia de las edades en las que se tiene desordenes cardiacos
plt.figure(figsize=(10, 6))
sns.histplot(df['age'], color='blue')
#plt.title('Distribución de Edad en Personas con Desordenes Cardíacos')
plt.xlabel('Edad')
plt.ylabel('Frecuencia')
plt.show()

df_stroke = df[df['stroke'] == 1]

sns.set(style="whitegrid")

plt.figure(figsize=(10, 6))
sns.histplot(df_stroke['age'], color='blue')
#plt.title('Distribución de Edad en Personas que Sufrieron un Stroke')
plt.xlabel('Edad')
plt.ylabel('Frecuencia')
plt.show()

"""ANALIS UNIVARIADO Y BIVARIADO"""

profile = ProfileReport(df, title="ACV")
profile

frecuencia_ec= df['ever_married'].value_counts()
frecuencia_ec

frecuencia_ec_relativa=df['ever_married'].value_counts(normalize=True) * 100
frecuencia_ec_relativa

moda = df['ever_married'].mode()
moda

df_ec = df.groupby('ever_married').size()
plt.figure(figsize=(8, 8))
plt.pie(df_ec, labels=df_ec.index, autopct='%1.1f%%', colors=['red', 'green'], startangle=140)
#plt.title("¿Alguna vez estuvieron casados?")
plt.axis('equal')
plt.show()

plt.figure(figsize=(8, 6))
df['ever_married'].value_counts().plot(kind='bar', color=['green', 'red'])
#plt.title('Distribución de Ever Married')
plt.xlabel('Ever Married')
plt.ylabel('Número de Observaciones')
plt.xticks(rotation=0)
plt.show()

frecuencia_trabajo=df['work_type'].value_counts()
frecuencia_trabajo

moda_trabajo=df['work_type'].mode()
moda_trabajo

frecuencia_relativa_trabajo=df['work_type'].value_counts(normalize=True)*100
frecuencia_relativa_trabajo

#df.drop(['avg_glucose_level','residence_type','ever_married','work_type'],axis='columns',inplace=True)

df.drop(['residence_type','ever_married','work_type'],axis='columns',inplace=True)

df

"""## BMI en funcion de'age', 'smoking_status', 'stroke', 'hypertension', 'avg_glucose_level', 'heart_disease'"""

# Balancear el dataset
df['gender'] = df['gender'].replace({'Female': 0, 'Male': 1})
df['smoking_status'] = df['smoking_status'].replace({'Never smoked': 0, 'Formerly smoked': 1, 'Smokes': 2, 'No smokes': 3})

"""df_stroke = df[df['stroke'] == 1]
df_no_stroke = df[df['stroke'] == 0]
balanced_df = pd.concat([
    resample(df_stroke, replace=True, n_samples=600, random_state=42),
    resample(df_no_stroke, replace=True, n_samples=600, random_state=42)
])"""

dataset2_bmi = df[df['bmi'] <25 ]

X= dataset2_bmi[['age','avg_glucose_level','hypertension', 'heart_disease', 'stroke', 'smoking_status']]
y = dataset2_bmi['bmi']    # Variable objetivo (por ejemplo, BMI)

#X = balanced_df[['age', 'smoking_status', 'stroke', 'hypertension', 'avg_glucose_level', 'heart_disease']]
#y = balanced_df['bmi']

# Características polinómicas
poly_features = PolynomialFeatures(degree=2)
X_poly = poly_features.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.3, random_state=42)


model = LinearRegression()
model.fit(X_train, y_train)


y_pred = model.predict(X_test)


mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
print("Mean Squared Error:", mse)
print("Root Mean Squared Error (RMSE):", rmse)

X_range = np.linspace(X_test[:, 1].min(), X_test[:, 1].max(), 600).reshape(-1, 1)


X_range_like_X_test = np.zeros((X_range.shape[0], X.shape[1]))
X_range_like_X_test[:, 1] = X_range[:, 0]


X_range_poly = poly_features.transform(X_range_like_X_test)

# Gráfico
plt.plot(X_test[:, 1], y_test, "b.", label="Datos reales")  # Puntos de prueba
plt.plot(X_range, model.predict(X_range_poly), "r-", label="Predicción polinómica", linewidth=2)
plt.xlabel(" ")
plt.ylabel("BMI")
plt.gca().set_xlim(left=0)  # Limitar el eje X a valores positivos
plt.gca().set_ylim(bottom=0)  # Limitar el eje Y a valores positivos

plt.legend(loc="upper left")
plt.show()


# Guardar el modelo entrenado en un archivo .joblib
joblib.dump(model, 'modelo_entrenado.joblib')