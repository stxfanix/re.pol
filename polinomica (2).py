# -*- coding: utf-8 -*-
"""polinomica

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D9fg6-rtq11-81jSwB_ZrXsHO6dQfwTf

Los titulos de los graficos no serán visibles.

Paquetes necesarios.
"""

import pandas as pd  # Para manipulación de datos
import numpy as np  # Para operaciones numéricas
from sklearn.model_selection import train_test_split  # Para dividir el dataset
from sklearn.linear_model import LinearRegression  # Para el modelo de regresión
from sklearn.preprocessing import PolynomialFeatures  # Para características polinómicas
from sklearn.metrics import mean_squared_error  # Para calcular métricas de error
import matplotlib.pyplot as plt  # Para la visualización

from google.colab import files

# Subir el archivo desde tu computadora
uploaded = files.upload()

import pandas as pd

# Cargar el archivo CSV en un DataFrame
df = pd.read_csv('resultado.csv')  # Asegúrate de que 'resultado.csv' sea el nombre correcto del archivo

df.drop(['residence_type','ever_married','work_type'],axis='columns',inplace=True)

df

"""## BMI en funcion de'age', 'smoking_status', 'stroke', 'hypertension', 'avg_glucose_level', 'heart_disease'"""

# Balancear el dataset
df['gender'] = df['gender'].replace({'Female': 0, 'Male': 1})
df['smoking_status'] = df['smoking_status'].replace({'Never smoked': 0, 'Formerly smoked': 1, 'Smokes': 2, 'No smokes': 3})

"""df_stroke = df[df['stroke'] == 1]
df_no_stroke = df[df['stroke'] == 0]
balanced_df = pd.concat([
    resample(df_stroke, replace=True, n_samples=600, random_state=42),
    resample(df_no_stroke, replace=True, n_samples=600, random_state=42)
])"""

dataset2_bmi = df[df['bmi'] <25 ]
# Crear variables dummy para 'smoking_status'
X = pd.get_dummies(dataset2_bmi[['age', 'avg_glucose_level', 'hypertension', 'heart_disease', 'stroke', 'smoking_status']], drop_first=True)

# Asegúrate de que 'y' sea correctamente definida
y = dataset2_bmi['bmi']  # Variable objetivo (por ejemplo, BMI)

print(X.shape)  # Verifica el número de columnas después de la transformación

#X= dataset2_bmi[['age','avg_glucose_level','hypertension', 'heart_disease', 'stroke', 'smoking_status']]
#y = dataset2_bmi['bmi']    # Variable objetivo (por ejemplo, BMI)

#X = balanced_df[['age', 'smoking_status', 'stroke', 'hypertension', 'avg_glucose_level', 'heart_disease']]
#y = balanced_df['bmi']

# Características polinómicas
poly_features = PolynomialFeatures(degree=2)
X_poly = poly_features.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.3, random_state=42)


modelo_entrenado = LinearRegression()
modelo_entrenado.fit(X_train, y_train)


y_pred = modelo_entrenado.predict(X_test)


mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
print("Mean Squared Error:", mse)
print("Root Mean Squared Error (RMSE):", rmse)

X_range = np.linspace(X_test[:, 1].min(), X_test[:, 1].max(), 600).reshape(-1, 1)


X_range_like_X_test = np.zeros((X_range.shape[0], X.shape[1]))
X_range_like_X_test[:, 1] = X_range[:, 0]


X_range_poly = poly_features.transform(X_range_like_X_test)

# Gráfico
plt.plot(X_test[:, 1], y_test, "b.", label="Datos reales")  # Puntos de prueba
plt.plot(X_range, modelo_entrenado.predict(X_range_poly), "r-", label="Predicción polinómica", linewidth=2)
plt.xlabel(" ")
plt.ylabel("BMI")
plt.gca().set_xlim(left=0)  # Limitar el eje X a valores positivos
plt.gca().set_ylim(bottom=0)  # Limitar el eje Y a valores positivos

plt.legend(loc="upper left")
plt.show()

joblib.dump(modelo_entrenado, 'modelo_entrenado.joblib')

import streamlit as st
import joblib

# Cargar el modelo entrenado
modelo_entrenado = joblib.load('modelo_entrenado.joblib')

# Título de la aplicación
st.title("Aplicación para predicción del índice de masa corporal ")

# Crear las opciones para las entradas del usuario

# Edad (valor numérico)
edad = st.slider("Selecciona tu edad:", min_value=1, max_value=100, value=25)

#Nivel de glucosa promedio
glucosa= st.slider ("Selecciona tu nivel de glucosa:", min_value=1, max_value=300, value=25)
# Hipertensión (0 = No, 1 = Sí)
hipertension = st.selectbox("Pon 0 si no tienes hipertensión o 1 si tienes", ["0", "1"])

# Cardiopatía (0 = No, 1 = Sí)
cardiopatia = st.selectbox("Selecciona 1 si padeces alguna cardiopatía o 0 si no", ["0", "1"])

#ACV
acv=  st.selectbox("Selecciona 1 si sufriste un ACV o 0 si no", ["0", "1"])

# Hábito de fumar
opciones_fumar = ["Never smoked", "Smokes", "No smokes", "Formerly smoked"]
humo = st.selectbox("Selecciona el hábito de consumo de tabaco que posees", opciones_fumar)




# Convertir las entradas a valores numéricos

# Convertir hipertensión y cardiopatía a 0 o 1
hipertension_valor = int(hipertension)
cardiopatia_valor = int(cardiopatia)
acv_valor=int (acv)

# Convertir hábito de fumar en valores numéricos
if humo == "Never smoked":
    never_smoked = 1
    no_smokes = 0
    formerly_smoked = 0
    smokes = 0
elif humo == "No smokes":
    never_smoked = 0
    no_smokes = 1
    formerly_smoked = 0
    smokes = 0
elif humo == "Formerly smoked":
    never_smoked = 0
    no_smokes = 0
    formerly_smoked = 1
    smokes = 0
else:  # "Smokes"
    never_smoked = 0
    no_smokes = 0
    formerly_smoked = 0
    smokes = 1

# Asegurarse de que las entradas sean números
caracteristicas = [
    float(edad),  # Convertir edad a flotante
    float(glucosa),
    int(hipertension_valor),  # Hipertensión como entero
    int(cardiopatia_valor),  # Cardiopatía como entero
    int(formerly_smoked),  # Fumar anteriormente como entero
    int(never_smoked),  # Nunca fumado como entero
    int(no_smokes),  # No fuma como entero
    int(smokes), # Fuma como entero
    int(acv_valor)
]

# Mostrar el resultado de la predicción (en este caso IMC)
prediccion_imc = modelo_entrenado.predict([caracteristicas])[0]  # Asumiendo que el modelo predice el IMC

# Mostrar el valor del IMC
st.write(f"El IMC predicho es: {prediccion_imc:.2f}")

# Clasificación en función del IMC o riesgo de ACV
if prediccion_imc < 18.5:
    st.write("Peso insuficiente")
elif 18.5 <= prediccion_imc < 24.9:
    st.write("Saludable. ")
elif 25 <= prediccion_imc < 29.9:
    st.write("Obesidad.")
else:
    st.write("Obesidad extrema.")

print(X.shape)  # Imprime el número de filas y columnas
print(X.columns)  # Imprime los nombres de las columnas